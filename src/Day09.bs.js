// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function singleton(value) {
  var el = /* record */[
    /* value */value,
    /* next */undefined,
    /* prev */undefined
  ];
  el[/* next */1] = el;
  el[/* prev */2] = el;
  return el;
}

function insertAfter(value, el) {
  var newEl = /* record */[
    /* value */value,
    /* next */el[/* next */1],
    /* prev */el
  ];
  var match = el[/* next */1];
  if (match !== undefined) {
    match[/* prev */2] = newEl;
  }
  el[/* next */1] = newEl;
  return newEl;
}

function remove(el) {
  var next = el[/* next */1];
  var prev = el[/* prev */2];
  if (prev !== undefined) {
    prev[/* next */1] = next;
  }
  if (next !== undefined) {
    next[/* prev */2] = prev;
  }
  el[/* prev */2] = undefined;
  el[/* next */1] = undefined;
  return /* () */0;
}

function prevN(_el, _n) {
  while(true) {
    var n = _n;
    var el = _el;
    var match = n === 0;
    if (match) {
      return el;
    } else {
      _n = n - 1 | 0;
      _el = Js_option.getExn(el[/* prev */2]);
      continue ;
    }
  };
}

var CyclicDLList = /* module */[
  /* singleton */singleton,
  /* insertAfter */insertAfter,
  /* remove */remove,
  /* prevN */prevN
];

function play(nPlayers, lastMarble) {
  var scores = Caml_array.caml_make_vect(nPlayers, 0);
  var _currentMarble = singleton(0);
  var _currentPlayer = 0;
  var _nextMarbleValue = 1;
  while(true) {
    var nextMarbleValue = _nextMarbleValue;
    var currentPlayer = _currentPlayer;
    var currentMarble = _currentMarble;
    var nextPlayer = Caml_int32.mod_(currentPlayer + 1 | 0, nPlayers);
    if (nextMarbleValue > lastMarble) {
      return $$Array.fold_left(Caml_obj.caml_max, 0, scores);
    } else if (nextMarbleValue % 23 === 0) {
      var marbleToRemove = prevN(currentMarble, 7);
      var nextCurrentMarble = Js_option.getExn(marbleToRemove[/* next */1]);
      Caml_array.caml_array_set(scores, currentPlayer, Caml_array.caml_array_get(scores, currentPlayer) + (nextMarbleValue + marbleToRemove[/* value */0] | 0));
      remove(marbleToRemove);
      _nextMarbleValue = nextMarbleValue + 1 | 0;
      _currentPlayer = nextPlayer;
      _currentMarble = nextCurrentMarble;
      continue ;
    } else {
      var tempMarble = Js_option.getExn(currentMarble[/* next */1]);
      var nextCurrentMarble$1 = insertAfter(nextMarbleValue, tempMarble);
      _nextMarbleValue = nextMarbleValue + 1 | 0;
      _currentPlayer = nextPlayer;
      _currentMarble = nextCurrentMarble$1;
      continue ;
    }
  };
}

var result = play(424, 71482);

console.log("Part1 result: ", result);

var Part1 = /* module */[/* result */result];

var result$1 = play(424, 7148200);

console.log("Part2 result: ", result$1);

var Part2 = /* module */[/* result */result$1];

exports.CyclicDLList = CyclicDLList;
exports.play = play;
exports.Part1 = Part1;
exports.Part2 = Part2;
/* result Not a pure module */
