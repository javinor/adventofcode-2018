// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var $$Map = require("bs-platform/lib/js/map.js");
var List = require("bs-platform/lib/js/list.js");
var Path = require("path");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

var inputPath = "./src/" + (Path.parse("Day04.re").name + ".input");

var dummy_input = /* array */[
  "[1518-11-01 00:00] Guard #10 begins shift",
  "[1518-11-01 00:05] falls asleep",
  "[1518-11-01 00:25] wakes up",
  "[1518-11-01 00:30] falls asleep",
  "[1518-11-01 00:55] wakes up",
  "[1518-11-01 23:58] Guard #99 begins shift",
  "[1518-11-02 00:40] falls asleep",
  "[1518-11-02 00:50] wakes up",
  "[1518-11-03 00:05] Guard #10 begins shift",
  "[1518-11-03 00:24] falls asleep",
  "[1518-11-03 00:29] wakes up",
  "[1518-11-04 00:02] Guard #99 begins shift",
  "[1518-11-04 00:36] falls asleep",
  "[1518-11-04 00:46] wakes up",
  "[1518-11-05 00:03] Guard #99 begins shift",
  "[1518-11-05 00:45] falls asleep",
  "[1518-11-05 00:55] wakes up"
];

var compare = Caml_obj.caml_compare;

var IntMap = $$Map.Make(/* module */[/* compare */compare]);

function int_of_bool(b) {
  if (b) {
    return 1;
  } else {
    return 0;
  }
}

function bumpDate(date) {
  var epoch = new Date("1518-" + date).valueOf();
  var oneDay_f = 24 * 60 * 60 * 1000;
  var d = new Date(epoch + oneDay_f);
  var month_f = d.getMonth() + 1;
  var match = month_f < 10;
  var month = (
    match ? "0" : ""
  ) + month_f.toString();
  var day_f = d.getDate();
  var match$1 = day_f < 10;
  var day = (
    match$1 ? "0" : ""
  ) + day_f.toString();
  return month + ("-" + day);
}

function parseLogLine(line) {
  var re = (/\[1518-(\d\d-\d\d) (\d\d):(\d\d)] (.*$)/);
  var matches = Js_option.getExn(Caml_option.null_to_opt(line.match(re)));
  if (matches.length !== 5) {
    return Pervasives.failwith("invalid input");
  } else {
    var date = matches[1];
    var hour = matches[2];
    var minute = matches[3];
    var message = matches[4];
    var $$event;
    switch (message) {
      case "falls asleep" : 
          $$event = /* FallsAsleep */Block.__(1, [Caml_format.caml_int_of_string(minute)]);
          break;
      case "wakes up" : 
          $$event = /* WakesUp */Block.__(2, [Caml_format.caml_int_of_string(minute)]);
          break;
      default:
        var re$prime = (/\d+/);
        var guardId = Caml_format.caml_int_of_string(Js_option.getExn(Caml_option.null_to_opt(message.match(re$prime)))[0]);
        $$event = /* BeginsShift */Block.__(0, [guardId]);
    }
    var match = hour !== "23";
    var date$1 = match ? date : bumpDate(date);
    return /* tuple */[
            date$1,
            $$event
          ];
  }
}

function mkZzzRecords(input) {
  return List.fold_left((function (zzzRecords, param) {
                var $$event = param[1];
                switch ($$event.tag | 0) {
                  case 0 : 
                      var asleepAtMinute = Caml_array.caml_make_vect(60, false);
                      var newRecord_000 = param[0];
                      var newRecord_001 = $$event[0];
                      var newRecord = /* tuple */[
                        newRecord_000,
                        newRecord_001,
                        asleepAtMinute
                      ];
                      return /* :: */[
                              newRecord,
                              zzzRecords
                            ];
                  case 1 : 
                      var minute = $$event[0];
                      var match = List.hd(zzzRecords);
                      $$Array.fill(match[2], minute, 60 - minute | 0, true);
                      return zzzRecords;
                  case 2 : 
                      var minute$1 = $$event[0];
                      var match$1 = List.hd(zzzRecords);
                      $$Array.fill(match$1[2], minute$1, 60 - minute$1 | 0, false);
                      return zzzRecords;
                  
                }
              }), /* [] */0, $$Array.to_list(input.sort().map(parseLogLine)));
}

function printZzzRecords(zzzRecords) {
  return List.iter((function (param) {
                var asleepAtMinute$prime = $$Array.map((function (isAsleep) {
                          if (isAsleep) {
                            return "#";
                          } else {
                            return ".";
                          }
                        }), param[2]).join("");
                console.log(param[0] + (" #" + (String(param[1]) + (" " + asleepAtMinute$prime))));
                return /* () */0;
              }), zzzRecords);
}

var input = Fs.readFileSync(inputPath, "utf8").split("\n");

var zzzRecords = mkZzzRecords(input);

var match = List.fold_left((function (param, param$1) {
        var dur$prime = param$1[1];
        var dur = param[1];
        if (dur > dur$prime) {
          return /* tuple */[
                  param[0],
                  dur
                ];
        } else {
          return /* tuple */[
                  param$1[0],
                  dur$prime
                ];
        }
      }), /* tuple */[
      0,
      0
    ], Curry._1(IntMap[/* bindings */16], List.fold_left((function (sleepDurations, param) {
                var duration = $$Array.fold_left((function (prim, prim$1) {
                        return prim + prim$1 | 0;
                      }), 0, $$Array.map(int_of_bool, param[2]));
                return Curry._3(IntMap[/* merge */6], (function (param, dur1, dur2) {
                              var dur1$prime = Js_option.getWithDefault(0, dur1);
                              var dur2$prime = Js_option.getWithDefault(0, dur2);
                              return dur1$prime + dur2$prime | 0;
                            }), sleepDurations, Curry._2(IntMap[/* singleton */4], param[1], duration));
              }), IntMap[/* empty */0], zzzRecords)));

var topSleeper = match[0];

var napsAtMinute = List.fold_left((function (acc, param) {
        var asleepAtMinute = param[2];
        return acc.map((function (n, i) {
                      return n + (
                              Caml_array.caml_array_get(asleepAtMinute, i) ? 1 : 0
                            ) | 0;
                    }));
      }), Caml_array.caml_make_vect(60, 0), List.filter((function (param) {
              return param[1] === topSleeper;
            }))(zzzRecords));

var topNaps = $$Array.fold_left(Caml_obj.caml_max, 0, napsAtMinute);

var sleepiestMinute = napsAtMinute.findIndex((function (naps) {
        return naps === topNaps;
      }));

console.log("topSleeper: " + String(topSleeper));

console.log("sleepiestMinute: " + String(sleepiestMinute));

console.log("Part1 result: " + String(Caml_int32.imul(topSleeper, sleepiestMinute)));

var Part1_003 = /* topDuration */match[1];

var Part1 = /* module */[
  /* input */input,
  /* zzzRecords */zzzRecords,
  /* topSleeper */topSleeper,
  Part1_003,
  /* napsAtMinute */napsAtMinute,
  /* topNaps */topNaps,
  /* sleepiestMinute */sleepiestMinute
];

var input$1 = Fs.readFileSync(inputPath, "utf8").split("\n");

var zzzRecords$1 = mkZzzRecords(input$1);

var napCountAtMinute = List.fold_left((function (napCounts, param) {
        var napCount = $$Array.map(int_of_bool, param[2]);
        return Curry._3(IntMap[/* merge */6], (function (param, nNaps1, nNaps2) {
                      var nNaps1$prime = Js_option.getWithDefault(Caml_array.caml_make_vect(60, 0), nNaps1);
                      var nNaps2$prime = Js_option.getWithDefault(Caml_array.caml_make_vect(60, 0), nNaps2);
                      return Belt_Array.zipBy(nNaps1$prime, nNaps2$prime, (function (prim, prim$1) {
                                    return prim + prim$1 | 0;
                                  }));
                    }), napCounts, Curry._2(IntMap[/* singleton */4], param[1], napCount));
      }), IntMap[/* empty */0], zzzRecords$1);

var match$1 = List.fold_left((function (param, param$1) {
        var match = param$1[1];
        var nNaps$prime = match[1];
        var match$1 = param[1];
        var nNaps = match$1[1];
        if (nNaps > nNaps$prime) {
          return /* tuple */[
                  param[0],
                  /* tuple */[
                    match$1[0],
                    nNaps
                  ]
                ];
        } else {
          return /* tuple */[
                  param$1[0],
                  /* tuple */[
                    match[0],
                    nNaps$prime
                  ]
                ];
        }
      }), /* tuple */[
      0,
      /* tuple */[
        0,
        0
      ]
    ], Curry._1(IntMap[/* bindings */16], Curry._2(IntMap[/* map */22], (function (napCount) {
                var topNaps = $$Array.fold_left(Caml_obj.caml_max, 0, napCount);
                var sleepiestMinute = napCount.findIndex((function (naps) {
                        return naps === topNaps;
                      }));
                return /* tuple */[
                        sleepiestMinute,
                        topNaps
                      ];
              }), napCountAtMinute)));

var match$2 = match$1[1];

var sleepiestMinute$1 = match$2[0];

var topSleeper$1 = match$1[0];

console.log("topSleeper: " + String(topSleeper$1));

console.log("sleepiestMinute: " + String(sleepiestMinute$1));

console.log("Part2 result: " + String(Caml_int32.imul(topSleeper$1, sleepiestMinute$1)));

var Part2_005 = /* nNaps */match$2[1];

var Part2 = /* module */[
  /* input */input$1,
  /* zzzRecords */zzzRecords$1,
  /* napCountAtMinute */napCountAtMinute,
  /* topSleeper */topSleeper$1,
  /* sleepiestMinute */sleepiestMinute$1,
  Part2_005
];

exports.inputPath = inputPath;
exports.dummy_input = dummy_input;
exports.IntMap = IntMap;
exports.int_of_bool = int_of_bool;
exports.bumpDate = bumpDate;
exports.parseLogLine = parseLogLine;
exports.mkZzzRecords = mkZzzRecords;
exports.printZzzRecords = printZzzRecords;
exports.Part1 = Part1;
exports.Part2 = Part2;
/* inputPath Not a pure module */
