// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var $$Map = require("bs-platform/lib/js/map.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var inputPath = "./src/Day02.input";

var StringMap = $$Map.Make([$$String.compare]);

function calculateChecksumType(str) {
  var letters = str.split("");
  var letterHistogram = $$Array.fold_left((function (hist, letter) {
          var match = Curry._2(StringMap[/* mem */2], letter, hist);
          var freq = match ? Curry._2(StringMap[/* find */21], letter, hist) + 1 | 0 : 1;
          return Curry._3(StringMap[/* add */3], letter, freq, hist);
        }), StringMap[/* empty */0], letters);
  return Curry._3(StringMap[/* fold */10], (function (param, freq, checksumType) {
                if (freq !== 2) {
                  if (freq !== 3) {
                    return checksumType;
                  } else if (checksumType !== 0) {
                    if (checksumType >= 3) {
                      return /* ExactlyThree */1;
                    } else {
                      return checksumType;
                    }
                  } else {
                    return /* BothTwoAndThree */2;
                  }
                } else if (checksumType !== 0) {
                  switch (checksumType - 1 | 0) {
                    case 0 : 
                        return /* BothTwoAndThree */2;
                    case 1 : 
                        return checksumType;
                    case 2 : 
                        return /* ExactlyTwo */0;
                    
                  }
                } else {
                  return checksumType;
                }
              }), letterHistogram, /* None */3);
}

var match = $$Array.fold_left((function (param, csType) {
        var nThrees = param[1];
        var nTwos = param[0];
        switch (csType) {
          case 0 : 
              return /* tuple */[
                      nTwos + 1 | 0,
                      nThrees
                    ];
          case 1 : 
              return /* tuple */[
                      nTwos,
                      nThrees + 1 | 0
                    ];
          case 2 : 
              return /* tuple */[
                      nTwos + 1 | 0,
                      nThrees + 1 | 0
                    ];
          case 3 : 
              return /* tuple */[
                      nTwos,
                      nThrees
                    ];
          
        }
      }), /* tuple */[
      0,
      0
    ], $$Array.map(calculateChecksumType, Fs.readFileSync(inputPath, "utf8").split("\n")));

var nThrees = match[1];

var nTwos = match[0];

console.log("Part1 result: " + String(Caml_int32.imul(nTwos, nThrees)));

var Part1 = /* module */[
  /* StringMap */StringMap,
  /* calculateChecksumType */calculateChecksumType,
  /* nTwos */nTwos,
  /* nThrees */nThrees
];

function differByOne(_s1, _s2) {
  while(true) {
    var s2 = _s2;
    var s1 = _s1;
    if (s1 === "" || s2 === "") {
      return false;
    } else {
      var length = s1.length;
      var tail1 = $$String.sub(s1, 1, length - 1 | 0);
      var tail2 = $$String.sub(s2, 1, length - 1 | 0);
      if (Caml_string.get(s1, 0) !== Caml_string.get(s2, 0)) {
        return tail1 === tail2;
      } else {
        _s2 = tail2;
        _s1 = tail1;
        continue ;
      }
    }
  };
}

function findPair(p, _ids) {
  while(true) {
    var ids = _ids;
    if (ids) {
      var ids$1 = ids[1];
      var id = ids[0];
      if (ids$1) {
        var exit = 0;
        var id$prime;
        try {
          id$prime = List.find((function(id){
              return function (param) {
                return differByOne(id, param);
              }
              }(id)), ids$1);
          exit = 1;
        }
        catch (exn){
          if (exn === Caml_builtin_exceptions.not_found) {
            _ids = ids$1;
            continue ;
          } else {
            throw exn;
          }
        }
        if (exit === 1) {
          return /* tuple */[
                  id,
                  id$prime
                ];
        }
        
      } else {
        return Pervasives.failwith("no pair found");
      }
    } else {
      return Pervasives.failwith("no pair found");
    }
  };
}

var ids = $$Array.to_list(Fs.readFileSync(inputPath, "utf8").split("\n"));

var match$1 = findPair(differByOne, ids);

var id2 = match$1[1];

var id1 = match$1[0];

var result = /* record */[/* contents */""];

for(var ii = 0 ,ii_finish = id1.length - 1 | 0; ii <= ii_finish; ++ii){
  if (Caml_string.get(id1, ii) === Caml_string.get(id2, ii)) {
    result[0] = result[0] + $$String.sub(id1, ii, 1);
  }
  
}

console.log("Part2 result: " + result[0]);

var Part2 = /* module */[
  /* differByOne */differByOne,
  /* findPair */findPair,
  /* ids */ids,
  /* id1 */id1,
  /* id2 */id2,
  /* result */result
];

exports.inputPath = inputPath;
exports.Part1 = Part1;
exports.Part2 = Part2;
/* StringMap Not a pure module */
