// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Path = require("path");
var $$Array = require("bs-platform/lib/js/array.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

var inputPath = "./src/" + (Path.parse("Day10.re").name + ".input");

var input = Fs.readFileSync(inputPath, "utf8").split("\n");

var dummy_input = /* array */[
  "position=< 9,  1> velocity=< 0,  2>",
  "position=< 7,  0> velocity=<-1,  0>",
  "position=< 3, -2> velocity=<-1,  1>",
  "position=< 6, 10> velocity=<-2, -1>",
  "position=< 2, -4> velocity=< 2,  2>",
  "position=<-6, 10> velocity=< 2, -2>",
  "position=< 1,  8> velocity=< 1, -1>",
  "position=< 1,  7> velocity=< 1,  0>",
  "position=<-3, 11> velocity=< 1, -2>",
  "position=< 7,  6> velocity=<-1, -1>",
  "position=<-2,  3> velocity=< 1,  0>",
  "position=<-4,  3> velocity=< 2,  0>",
  "position=<10, -3> velocity=<-1,  1>",
  "position=< 5, 11> velocity=< 1, -2>",
  "position=< 4,  7> velocity=< 0, -1>",
  "position=< 8, -2> velocity=< 0,  1>",
  "position=<15,  0> velocity=<-2,  0>",
  "position=< 1,  6> velocity=< 1,  0>",
  "position=< 8,  9> velocity=< 0, -1>",
  "position=< 3,  3> velocity=<-1,  1>",
  "position=< 0,  5> velocity=< 0, -1>",
  "position=<-2,  2> velocity=< 2,  0>",
  "position=< 5, -2> velocity=< 1,  2>",
  "position=< 1,  4> velocity=< 2,  1>",
  "position=<-2,  7> velocity=< 2, -2>",
  "position=< 3,  6> velocity=<-1, -1>",
  "position=< 5,  0> velocity=< 1,  0>",
  "position=<-6,  0> velocity=< 2,  0>",
  "position=< 5,  9> velocity=< 1, -2>",
  "position=<14,  7> velocity=<-2,  0>",
  "position=<-3,  6> velocity=< 2, -1>"
];

function parseLine(line) {
  var re = (/^position=<(.+), (.+)> velocity=<(.+), (.+)>$/);
  var exit = 0;
  var val;
  try {
    val = $$Array.map(Caml_format.caml_int_of_string, $$Array.map((function (prim) {
                return prim.trim();
              }), Js_option.getExn(Caml_option.null_to_opt(line.match(re))).slice(1)));
    exit = 1;
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    console.log("exception was raised while parsing input: " + line, e);
    throw e;
  }
  if (exit === 1) {
    if (val.length !== 4) {
      return Pervasives.failwith("failed to parse input: " + line);
    } else {
      var px = val[0];
      var py = val[1];
      var vx = val[2];
      var vy = val[3];
      return /* tuple */[
              /* tuple */[
                px,
                py
              ],
              /* tuple */[
                vx,
                vy
              ]
            ];
    }
  }
  
}

function printPoints(points) {
  var match = $$Array.fold_left((function (param, param$1) {
          var match = param$1[0];
          var y = match[1];
          var x = match[0];
          return /* tuple */[
                  Caml_primitive.caml_int_min(param[0], x),
                  Caml_primitive.caml_int_max(param[1], x),
                  Caml_primitive.caml_int_min(param[2], y),
                  Caml_primitive.caml_int_max(param[3], y)
                ];
        }), /* tuple */[
        Pervasives.max_int,
        Pervasives.min_int,
        Pervasives.max_int,
        Pervasives.min_int
      ], points);
  var maxY = match[3];
  var minY = match[2];
  var maxX = match[1];
  var minX = match[0];
  if ((maxX - minX | 0) <= 100 && (maxY - minY | 0) <= 20) {
    var nRows = (maxY - minY | 0) + 1 | 0;
    var nCols = (maxX - minX | 0) + 1 | 0;
    var grid = $$Array.make_matrix(nRows, nCols, ".");
    $$Array.iter((function (param) {
            var match = param[0];
            var row = match[1] - minY | 0;
            var col = match[0] - minX | 0;
            return Caml_array.caml_array_set(Caml_array.caml_array_get(grid, row), col, "#");
          }), points);
    console.log($$Array.map((function (row) {
                  return row.join("");
                }), grid).join("\n"));
    return true;
  } else {
    return false;
  }
}

function tick(points) {
  return $$Array.map((function (param) {
                var match = param[1];
                var vy = match[1];
                var vx = match[0];
                var match$1 = param[0];
                return /* tuple */[
                        /* tuple */[
                          match$1[0] + vx | 0,
                          match$1[1] + vy | 0
                        ],
                        /* tuple */[
                          vx,
                          vy
                        ]
                      ];
              }), points);
}

var points = $$Array.map(parseLine, input);

printPoints(points);

var points$prime = /* record */[/* contents */points];

for(var t = 1; t <= 50000; ++t){
  points$prime[0] = tick(points$prime[0]);
  var printTime = printPoints(points$prime[0]);
  if (printTime) {
    console.log(t);
  }
  
}

var Part1And2 = /* module */[
  /* points */points,
  /* points' */points$prime
];

exports.inputPath = inputPath;
exports.input = input;
exports.dummy_input = dummy_input;
exports.parseLine = parseLine;
exports.printPoints = printPoints;
exports.tick = tick;
exports.Part1And2 = Part1And2;
/* inputPath Not a pure module */
